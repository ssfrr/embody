#!/usr/bin/env python

'''

embody

Usage:
 embody project [options] <name>
 embody module [options] <name>
 embody fake [options] <infile> [-- <cppargs>...]
 embody dumpconfig [options] [outfile]

embody is a set of tools for embedded C development. Configuration can be given
as command line options or in a .embodyrc.yaml file, or in .embody/config.yaml.
These config files can be placed in $HOME, or in the project directory. More
specific config files (e.g.  per project) override more general ones (e.g. in
$HOME). Command line arguments take precedence.

Valid configuration keys are:

    cpp_args
    project_root
    src_dir
    test_dir
    fake_dir
    project_name
    copyright_holder
    author
    fake_prefix

For example, to set the prefix for fake files, use `fakeprefix: "myprefix"`.
Pro Tip: use the `-v` option to see where embody has loaded the configuration.

Subcommands:
    project
        Generate an initial skeleton project

    module
        Generate a fake module within the current project

    fake
        Generate a fake header/implementation pair that implements the given
        header file. You can supply arguments to the C Preprocessor that will
        be used during parsing.

    dumpconfig
        Dump the loaded configuration to a file. (use the -v flag to see where
        it's being loaded from). If no output file is given it will be dumped
        to stdout.

Options:
 -p <name> --project=<name>       Project name used when generating modules
                                  and fakes
 -a <name> --author=<name>        the author of the code.
 -c <name> --copyright=<name>     The copyright holder. If not given then the
                                  author is used.
 -d <dir>, --srcdir=<dir>         Directory for generated header and source
 -t <dir>, --testdir=<dir>        Directory for generated test files
 -k <dir>, --fakedir=<dir>        Directory for generated fakes
 -o <file>, --outfile=<file>      Filename base for generated files. `.c` and
                                  `.h` will be appended as necessary
 -f <str>, --fakeprefix=<str>     Filename prefix for generated files
                                  (default: Fake)
 -v, --verbose                    Print extra info
 --help                           Print this helpful message
'''

import sys
from docopt import docopt
import embody
import coloredlogs
import logging
import yaml

logger = logging.getLogger()
logger.addHandler(coloredlogs.ColoredStreamHandler(
    show_name=False,
    show_severity=False,
    show_timestamps=False,
    show_hostname=False))
logger.setLevel(logging.INFO)


def config_from_args(args):
    '''This maps values from the command line arguments into the config dict'''
    argmap = [
        ('--project', 'project_name'),
        ('--author', 'author'),
        ('--copyright', 'copyright_holder'),
        ('--srcdir', 'src_dir'),
        ('--testdir', 'test_dir'),
        ('--fakedir', 'fake_dir'),
        ('--fakeprefix', 'fake_prefix')
    ]
    cfg = {}
    for argname, cfgname in argmap:
        if args[argname] is not None:
            cfg[cfgname] = args[argname]
    return cfg


def dispatch_cmd(args):
    # pull out the arguments that are part of the config file system. We'll
    # pass them into embody.get_config to get the resulting configuration.
    cmdline_options = config_from_args(args)
    # if the user provided a `--` for cppargs, then the following arguments
    # (which might be empty) should override the configured value. If they
    # didn't then just let the config decide
    cppargs = args['<cppargs>']
    if len(cppargs) > 0 and cppargs[0] == '--':
        cmdline_options['cpp_args'] = cppargs[1:]
    cfg = embody.get_config(cmdline_options)
    if args['fake']:
        embody.generate_fake(args['<name>'], cfg),
    elif args['module']:
        embody.generate_module(args['<name>'], cfg)
    elif args['project']:
        logger.warning("Not Implemented")
    elif args['dumpconfig']:
        if args['outfile']:
            embody.save_config(cfg, args['outfile'])
        else:
            print(yaml.safe_dump(cfg))


def main(args):
    if args['--verbose']:
        logger.setLevel(logging.DEBUG)
    logger.debug("Command line options: \n-----\n%s\n-----" % args)
    try:
        dispatch_cmd(args)
        return 0
    except embody.EmbodyError as e:
        logger.error(e)
        return -1


if __name__ == '__main__':
    args = docopt(__doc__)
    sys.exit(main(args))
